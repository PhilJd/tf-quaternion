import tensorflow as tf
import tfquaternion as tfq

test_vector_count = 20
epsilon = 1e-3
u_list = tf.random.uniform((test_vector_count, 3))
u_list = tf.math.l2_normalize(u_list, axis=1)
v_list = tf.random.uniform((test_vector_count, 3))
v_list = tf.math.l2_normalize(v_list, axis=1)

# append some hard-coded test cases, to make sure that we hit the special case
# in a special case that is flipping the x-axis, as well as some others like
# no rotation.
u_manuals = tf.constant(
    (
        (1, 0, 0),
        (1, 0, 0),
        (1, 0, 0),
        (-1, 0, 0),
        (-1, 0, 0),
        (-1, 0, 0),
        (1, 1, 1),
        (1, 1, 1),
    ),
    dtype=tf.float32
)
v_manuals = tf.constant(
    (
        (1, 0, 0),
        (-1, 0, 0),
        (0, 1, 0),
        (-1, 0, 0),
        (1, 0, 0),
        (0, 1, 0),
        (1, 1, 1),
        (-1, -1, -1),
    ),
    dtype=tf.float32
)

u_list = tf.concat([u_list, u_manuals], 0)
v_list = tf.concat([v_list, v_manuals], 0)
count = u_list.shape[0]

# Test that we can correctly rotate u onto v individually
print("test u -> v individually")
for i in range(count):
    u = u_list[i]
    v = v_list[i]

    #print(f"u: {u}")
    #print(f"v: {v}")

    q = tfq.get_rotation_quaternion_from_u_to_v(u, v)
    v_computed = tfq.rotate_vector_by_quaternion(q, u)
    #print(f"q: {q}")

    print(bool(tf.reduce_all(v - v_computed < epsilon)))
    print("-----------------------")

# Test that flipping u works correctly
print(f"Test u -> -u individually")
for i in range(count):
    u = u_list[i]
    q = tfq.get_rotation_quaternion_from_u_to_v(u, -u)
    #print(f"u: {u}")
    #print(f"q: {q}")
    neg_u = tfq.rotate_vector_by_quaternion(q, u)
    print(bool(tf.reduce_all(u + neg_u < epsilon)))
    print("-----------------------")

# Test that we can correctly rotate u onto v in a batch
print("test u -> v in a batch")
q = tfq.get_rotation_quaternion_from_u_to_v(u_list, v_list)
v_computed = tfq.rotate_vector_by_quaternion(q, u_list)
#print(f"u: {u_list}")
#print(f"v: {v_list}")
#print(f"q: {q}")
print(f"v_computed: {v_computed}")
print(bool(tf.reduce_all(v_list - v_computed < epsilon)))
print("-----------------------")

# Test that flipping u works in a batch
print(f"Test u -> -u in a batch")
q = tfq.get_rotation_quaternion_from_u_to_v(u_list, -u_list)
neg_u = tfq.rotate_vector_by_quaternion(q, u_list)
print(bool(tf.reduce_all(u_list + neg_u < epsilon)))
print("-----------------------")
